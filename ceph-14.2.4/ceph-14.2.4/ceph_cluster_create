#!/bin/bash

source /usr/bin/ceph_internal_common
source /usr/bin/ceph_internal_common_mon

if [ -z "$MON_INIT_MEM_ID" ] ; then
    echo "ERROR: MON_INIT_MEM_ID must be specified"
    exit 1
fi

if [ -z "$MON_INIT_MEM_ADDR" ] ; then
    echo "ERROR: MON_INIT_MEM_ADDR must be specified"
    exit 1
fi

if [ -z "$PUBLIC_NETWORK" ] ; then
    echo "ERROR: PUBLIC_NETWORK must be specified"
    exit 1
fi

if [ -z "$CLUSTER_NETWORK" ] ; then
    CLUSTER_NETWORK=$PUBLIC_NETWORK
fi

#to enable msg2, not work!

#ip=$(echo ${MON_INIT_MEM_ADDR} | cut -d ':' -f 1)
#port=$(echo ${MON_INIT_MEM_ADDR} | cut -d ':' -f 2)
#v1=$ip:$port
#v2=$ip:3300
#addr="v2:$v2,v1:$v1"

function gen_conf()
{
    local dir=$(dirname $CCONF)
    mkdir -p $dir || return 1

    local cluster_fsid=$(uuidgen)

cat > $CCONF << EOF
[global]
    cluster = ${CLUSTER_NAME}
    fsid    = ${cluster_fsid}

    public network  = ${PUBLIC_NETWORK}
    cluster network = ${CLUSTER_NETWORK}

    auth cluster required = cephx
    auth service required = cephx
    auth client required  = cephx

    osd pool default size     = 3
    osd pool default min size = 2

    osd pool default pg num     = 32
    osd pool default pgp num    = 32

    osd pool default crush rule = 0
    osd crush chooseleaf type   = 1

    admin socket                = ${DIR_VAR_RUN_CEPH}/\${cluster}-\${name}.asock
    pid file                    = ${DIR_VAR_RUN_CEPH}/\${cluster}-\${name}.pid
    log file                    = ${DIR_VAR_RUN_CEPH}/\${cluster}-\${name}.log
    log to syslog               = false

    max open files              = 131072
    ms bind ipv6                = false

    ;debug ms                     = 20
    ;debug mon                    = 20
    ;debug paxos                  = 20
    ;debug auth                   = 20

[mon]
    mon initial members = ${MON_INIT_MEM_ID}
    mon host            = ${MON_INIT_MEM_ADDR}

    mon data                     = ${DIR_VAR_LIB_CEPH}/mon/\${cluster}-\${id}
    mon clock drift allowed      = 10
    mon clock drift warn backoff = 30

    mon osd full ratio           = .95
    mon osd nearfull ratio       = .85

    mon osd down out interval    = 600
    mon osd report timeout       = 300
    mon allow pool delete        = true  ; without this, you cannot delete pool

[mon.${MON_INIT_MEM_ID}]
    host                         = mon-${MON_INIT_MEM_ID}
    mon addr                     = ${MON_INIT_MEM_ADDR}
EOF

    ls -l $CCONF

    return 0
}

function gen_init_monmap()
{
    local dir=$(dirname $INIT_MONMAP)
    mkdir -p $dir || return 1

    local fsid=$(ceph-conf -s global --lookup "fsid" -c $CCONF)
    monmaptool --create --add ${MON_INIT_MEM_ID} ${MON_INIT_MEM_ADDR} --fsid $fsid $INIT_MONMAP || return 1

    ls -l $INIT_MONMAP
    monmaptool --print $INIT_MONMAP 

    return 0
}

function gen_keyrings()
{
    for kr in $CLUSTER_KEYRING $ADMIN_KEYRING $OSD_BOOTSTRAP_KEYRING $MDS_BOOTSTRAP_KEYRING $RGW_BOOTSTRAP_KEYRING $RBD_MIRROR_BOOTSTRAP_KEYRING ; do
        local dir=$(dirname $kr)
        mkdir -p $dir || return 1
    done

    ceph-authtool --create-keyring ${CLUSTER_KEYRING} --gen-key -n mon. --cap mon 'allow *'

    ceph-authtool --create-keyring ${ADMIN_KEYRING} --gen-key   \
        -n client.admin                                         \
        --cap mon 'allow *'                                     \
        --cap osd 'allow *'                                     \
        --cap mds 'allow *'                                     \
        --cap mgr 'allow *'

    ceph-authtool --create-keyring ${OSD_BOOTSTRAP_KEYRING} --gen-key   \
        -n client.bootstrap-osd                                         \
        --cap mon 'allow profile bootstrap-osd'

    ceph-authtool --create-keyring ${MDS_BOOTSTRAP_KEYRING} --gen-key   \
        -n client.bootstrap-mds                                         \
        --cap mon 'allow profile bootstrap-mds'

    ceph-authtool --create-keyring ${RGW_BOOTSTRAP_KEYRING} --gen-key   \
        -n client.bootstrap-rgw                                         \
        --cap mon 'allow profile bootstrap-rgw'

    ceph-authtool --create-keyring ${RBD_MIRROR_BOOTSTRAP_KEYRING} --gen-key   \
        -n client.bootstrap-rbd                                                \
        --cap mon 'allow profile bootstrap-rbd'
  
    for kr in $ADMIN_KEYRING $OSD_BOOTSTRAP_KEYRING $MDS_BOOTSTRAP_KEYRING $RGW_BOOTSTRAP_KEYRING $RBD_MIRROR_BOOTSTRAP_KEYRING ; do
      if [ -f "$kr" ]; then
        ceph-authtool "$CLUSTER_KEYRING" --import-keyring "$kr"
      fi
    done

    return 0
}

function initialize()
{
    gen_conf
    if [ $? -ne 0 ] ; then
        echo "gen_conf failed"
        return 1
    fi
    gen_init_monmap
    if [ $? -ne 0 ] ; then
        echo "gen_init_monmap failed"
        return 1
    fi
    gen_keyrings
    if [ $? -ne 0 ] ; then
        echo "gen_keyrings failed"
        return 1
    fi
    return 0
}

initialize
if [ $? -ne 0 ] ; then
    echo "initialize failed"
    exit 1
fi

start_mon $MON_INIT_MEM_ID
if [ $? -ne 0 ] ; then
    echo "start init mon failed"
    exit 1
fi

exit 0
